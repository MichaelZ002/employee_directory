{"version":3,"sources":["logo.svg","components/Comp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Comp","props","searchedSorted","employees","filter","employee","firstName","lastName","toLowerCase","includes","search","sort","a","b","x","y","className","scope","map","key","id","phone","email","favoriteFood","App","useState","setSearch","setSort","htmlFor","onChange","event","target","value","placeholder","type","name","checked","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc6eb27d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nfunction Comp(props) {\r\n    //this is used to make it so we are able to sort the employee alphabetically  either ascending or descending \r\n    const searchedSorted = props.employees.filter( employee => (employee.firstName + \" \" + employee.lastName).toLowerCase().includes(props.search.toLowerCase())).sort( (a,b) => {\r\n        let x = (a.firstName + a.lastName).toLowerCase();\r\n        let y = (b.firstName + b.lastName).toLowerCase();\r\n        if (props.sort === \"asc\") {\r\n            if (x < y) return -1;\r\n            if (x > y) return 1;\r\n        } else {\r\n            if (x > y) return -1;\r\n            if (x < y) return 1;\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    return (\r\n        <table className=\"table table-striped table-hover\">\r\n            <thead className=\"thead-dark\">\r\n                <tr>\r\n                    <th scope=\"col\">Name:</th>\r\n                    <th scope=\"col\">Phone:</th>\r\n                    <th scope=\"col\">Email:</th>\r\n                    <th scope=\"col\">Favorite Food:</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {searchedSorted.map(employee => (\r\n                    <tr key={employee.id}>\r\n                        <th scope=\"row\">{employee.firstName + \" \" + employee.lastName}</th>\r\n                        <td>{employee.phone}</td>\r\n                        <td>{employee.email}</td>\r\n                        <td>{employee.favoriteFood}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Comp;","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Comp from './components/Comp'\n\nconst employees = [\n  {\n    id: 1,\n    firstName: \"Cool\",\n    lastName: \"Dude\",\n    email: \"cooldude1@coolguy.com\",\n    favoriteFood: \"Pizza\",\n  },\n  {\n    id: 2,\n    firstName: \"John\",\n    lastName: \"Smith\",\n    email: \"JohnSmith1@coolguy.com\",\n    favoriteFood: \"Burger\",\n  },\n  {\n    id: 3,\n    firstName: \"Left\",\n    lastName: \"Right\",\n    email: \"LeftRight1@coolguy.com\",\n    favoriteFood: \"Pizza\",\n  },\n  {\n    id: 4,\n    firstName: \"Top\",\n    lastName: \"Bottom\",\n    email: \"TopBottom1@coolguy.com\",\n    favoriteFood: \"Sour Patch Kids\",\n  },\n  {\n    id: 5,\n    firstName: \"Adam\",\n    lastName: \"Allen\",\n    email: \"cooldude1@coolguy.com\",\n    favoriteFood: \"Sour Patch Kids\",\n  },\n  {\n    id: 6,\n    firstName: \"Ben\",\n    lastName: \"Garcia\",\n    email: \"BenGarcia1@coolguy.com\",\n    favoriteFood: \"Burger\",\n  },\n  {\n    id: 7,\n    firstName: \"Michael\",\n    lastName: \"Zaslavsky\",\n    email: \"MichaelZaslavsky@coolguy.com\",\n    favoriteFood: \"Burger\",\n  },\n  {\n    id: 8,\n    firstName: \"Coal\",\n    lastName: \"DR\",\n    email: \"BenD1@coolguy.com\",\n    favoriteFood: \"Burger\",\n  },\n  {\n    id: 9,\n    firstName: \"R\",\n    lastName: \"Coal\",\n    email: \"BenD1@coolguy.com\",\n    favoriteFood: \"Burger\",\n  },\n  {\n    id: 0,\n    firstName: \"Some\",\n    lastName: \"Dude\",\n    email: \"BenD1@coolguy.com\",\n    favoriteFood: \"Burger\",\n  },\n];\n\nfunction App() {\n\n  const [search, setSearch] = useState(\"\");\n  const [sort, setSort] = useState(\"asc\");\n\n  return (\n    \n    <>\n    <div className=\"body\">\n    <div className=\"jumbotron jumbotron-fluid text-center\">\n    </div>\n    </div>\n      <h1 className=\"title text-center\">Cool Guy Employee Directory</h1>\n      <form>\n        \n        <div className=\"search form-group form-inline d-flex justify-content-center\">\n          <label htmlFor=\"search\">Search Name:</label>\n          <input id=\"search\" onChange={ event => setSearch(event.target.value) } placeholder=\"Michael Zaslavsky \" />\n        </div>\n        <div className=\"sort form-group form-inline d-flex justify-content-center\">\n          <label>Sort Name:</label>\n          <label className=\"radio-inline\"><input type=\"radio\" name=\"sort\" value=\"asc\" checked={ sort === \"asc\" } onChange={ event => setSort(event.target.value) } />Ascending</label>\n          <label className=\"radio-inline\"><input type=\"radio\" name=\"sort\" value=\"desc\" checked={ sort === \"desc\" } onChange={ event => setSort(event.target.value) } />Descending</label>\n        </div>\n      </form>\n      <Comp search={search} sort={sort} employees={employees}/>\n    </>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}